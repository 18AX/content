import demistomock as demisto  # noqa: F401
import urllib3
from CommonServerPython import *  # noqa: F401

QUERIES = {
    "tag": "get_taginfo",
    "signature": "get_siginfo",
    "file_type": "get_file_type",
    "clamav": "get_clamavinfo",
    "imphash": "get_imphash",
    "yara_rule": "get_yarainfo",
    "issuer_cn": "get_issuerinfo"
}

DBOT_SCORE = 3

VENDOR_NAME = 'MalwareBazaar'

VENDOR_RELIABILITY = DBotScoreReliability.A


class Client(BaseClient):
    def __init__(self, server_url, verify, proxy, headers, api_key):
        self.api_key = api_key
        super().__init__(base_url=server_url, verify=verify, proxy=proxy, headers=headers)

    def file_request(self, arguments):
        hash = arguments.get("hash")
        response = self._http_request('POST',
                                      files={
                                          'query': (None, "get_info"),
                                          'hash': (None, hash)
                                      })
        return response

    def malwarebazaar_download_sample_request(self, arguments):
        sha256_hash = arguments.get("sha256_hash")
        response = self._http_request('POST',
                                      files={
                                          'query': (None, "get_file"),
                                          'sha256_hash': (None, sha256_hash)
                                      })
        return response

    def malwarebazaar_comment_add_request(self, arguments):
        sha256_hash = arguments.get("sha256_hash")
        comment = arguments.get("comment")
        response = self._http_request('POST',
                                      headers={"API-KEY": self.api_key},
                                      files={
                                          'query': (None, "add_comment"),
                                          'sha256_hash': (None, sha256_hash),
                                          'comment': (None, comment)
                                      })
        return response

    def malwarebazaar_samples_list_request(self, arguments):
        sample_input = arguments.get("sample_type")
        value = arguments.get("sample_value")
        limit = arguments.get("limit") or 50
        query = QUERIES.get(sample_input)
        files = {
            'query': (None, query),
            sample_input: (None, value),
        }
        if not sample_input == 'issuer_cn':
            files.update({'limit': (None, limit)})
        response = self._http_request('POST',
                                      files=files)
        return response


def file_process(hash, raw_response, response_data) -> CommandResults:
    """
    creates CommandResults for every file in the list inserted to file_command
    Args:
        hash:
        raw_response:
        response_data:

    Returns:
    CommandResults for the relevant file
    """
    dbot_score = Common.DBotScore(
        indicator=hash,
        indicator_type=DBotScoreType.FILE,
        integration_name=VENDOR_NAME,
        score=DBOT_SCORE,
        reliability=VENDOR_RELIABILITY,
        malicious_description=response_data.get('comment')
    )

    signature = response_data.get('signature')
    relationship = EntityRelationship(name='indicator-of',
                                      entity_a=hash,
                                      entity_a_type='File',
                                      entity_b=signature,
                                      entity_b_type=FeedIndicatorType.indicator_type_by_server_version(
                                          "STIX Malware"),
                                      source_reliability=VENDOR_RELIABILITY,
                                      brand=VENDOR_NAME)

    table_name = f'{VENDOR_NAME} File reputation for: {hash}'
    md = tableToMarkdown(table_name, response_data)

    file_object = Common.File(md5=response_data.get('md5_hash'), sha256=response_data.get('sha256_hash'),
                              sha1=response_data.get('sha1_hash'), size=response_data.get('file_size'),
                              file_type=response_data.get('file_type'), dbot_score=dbot_score,
                              relationships=relationship)

    return CommandResults(
        outputs_prefix='MalwareBazaar.File',
        outputs_key_field='md5_hash',
        outputs=response_data,
        raw_response=raw_response,
        indicator=file_object,
        relationships=relationship,
        readable_output=md
    )


def check_query_status(response) -> bool:
    """
    checks whether the request to the API returned with the proper result
    Args:
        response:

    """
    query_status = response.get("query_status")
    if not query_status == "ok":
        raise Exception(query_status)


def file_command(client: Client, args: Dict[str, Any]) -> CommandResults:
    file_list = argToList(args.get('file'))
    command_results: List[CommandResults] = []
    for hash in file_list:
        raw_response = client.file_request({'hash': hash})
        check_query_status(raw_response)
        response_data = raw_response.get('data')[0]
        command_results.append(file_process(hash, raw_response, response_data))
    return command_results


def malwarebazaar_download_sample_command(client: Client, args: Dict[str, Any]) -> CommandResults:
    response = client.malwarebazaar_download_sample_request(args)
    filename = 'malware_sample.zip'
    command_results = fileResult(filename, response)

    return command_results


def malwarebazaar_comment_add_command(client: Client, args: Dict[str, Any]) -> CommandResults:
    response = client.malwarebazaar_comment_add_request(args)
    query_status = response.get("query_status")
    if not query_status == 'success':
        raise  Exception(query_status)

    readable_output = f'## {query_status}'
    return CommandResults(
        outputs_prefix='MalwareBazaar.MalwarebazaarCommentAdd',
        outputs_key_field='',
        outputs=response,
        readable_output=readable_output,
        raw_response=response
    )


def malwarebazaar_samples_list_command(client: Client, args: Dict[str, Any]) -> CommandResults:
    response = client.malwarebazaar_samples_list_request(args)
    check_query_status(response)

    response_data = response.get('data')
    readable_output = tableToMarkdown('Sample List', response_data)
    return CommandResults(
        outputs_prefix='MalwareBazaar.MalwarebazaarSamplesList',
        outputs_key_field='sha256_hash',
        readable_output=readable_output,
        outputs=response_data,
        raw_response=response
    )

def test_module(client: Client) -> None:
    # Test functions here
    return_results('ok')


def main() -> None:
    params: Dict[str, Any] = demisto.params()
    args: Dict[str, Any] = demisto.args()
    url = params.get('url')
    api_key = params.get('api_key')
    verify_certificate: bool = params.get('insecure', False)
    proxy = params.get('proxy', False)

    headers = {}

    command = demisto.command()
    demisto.debug(f'Command being called is {command}')

    try:
        requests.packages.urllib3.disable_warnings()
        client: Client = Client(urljoin(url, ''), verify_certificate, proxy, headers=headers, api_key=api_key)

        commands = {
            'file': file_command,
            'malwarebazaar-download-sample': malwarebazaar_download_sample_command,
            'malwarebazaar-comment-add': malwarebazaar_comment_add_command,
            'malwarebazaar-samples-list': malwarebazaar_samples_list_command,
        }

        if command == 'test-module':
            test_module(client)
        elif command in commands:
            return_results(commands[command](client, args))
        else:
            raise NotImplementedError(f'{command} command is not implemented.')

    except Exception as e:
        return_error(str(e))


if __name__ in ['__main__', 'builtin', 'builtins']:
    main()
