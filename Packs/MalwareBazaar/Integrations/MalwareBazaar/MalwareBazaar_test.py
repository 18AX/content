import pytest

import MalwareBazaar
import CommonServerPython
import io
import json

RESPONSE_DATA = {
    "comment": "test",
    "signature": "AgentTesla",
    "md5_hash": "2f6432c5af8d10b04caed90d410ec7ad",
    "sha256_hash": "094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d",
    "sha1_hash": "4b1fc10818dd534922feef4d521eb3574337e3c0",
    "file_size": 472064,
    "file_type": "exe"
}

BASE_URL = 'https://mb-api.abuse.ch/api/v1/'


def util_load_json(path):
    """

    Args:
        path:

    Returns:
        json object read from the path given
    """
    with io.open(path, mode='r', encoding='utf-8') as f:
        return json.loads(f.read())


def create_client():
    return MalwareBazaar.Client(
        server_url=BASE_URL,
        verify=False,
        proxy=False,
        headers={},
        api_key="111"
    )


def test_dbot_score():
    """

    checks if dbot score was set correctly to file
    """
    result = MalwareBazaar.file_process("094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d",
                                        {}, RESPONSE_DATA)
    indicator: CommonServerPython.Common.File = result.indicator
    assert indicator.dbot_score.score == 3


def test_file_command(mocker, requests_mock):
    mock_response = util_load_json('test_data/scan_file_results.json')
    requests_mock.post(BASE_URL, json=mock_response)

    client = create_client()

    args = {"file": ["094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d"]}
    response = MalwareBazaar.file_command(client, args)

    assert response[0].outputs == mock_response.get('data')[0]
    assert response[0].outputs_prefix == 'MalwareBazaar.File'
    assert response[0].outputs_key_field == 'md5_hash'
    assert response[0].relationships is not None


def test_malwarebazaar_sample_list(mocker, requests_mock):
    mock_response = util_load_json('test_data/samples_list_results.json')
    requests_mock.post(BASE_URL, json=mock_response)

    client = create_client()

    args = {"sample_type": "tag",
            "sample_value": "TrickBot",
            "limit": 2}
    response = MalwareBazaar.malwarebazaar_samples_list_command(client, args)

    assert response.outputs == mock_response.get('data')
    assert response.outputs_prefix == 'MalwareBazaar.MalwarebazaarSamplesList'
    assert response.outputs_key_field == 'sha256_hash'


def test_malwarebazaar_comment_add(requests_mock):
    mock_response = {
        'query_status': 'success'
    }
    requests_mock.post(BASE_URL, json=mock_response)

    client = create_client()

    args = {"sha256_hash": "094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d",
            "comment": "test"}
    response = MalwareBazaar.malwarebazaar_comment_add_command(client, args)

    assert response.outputs == mock_response
    assert response.outputs_prefix == 'MalwareBazaar.MalwarebazaarCommentAdd'


def test_malwarebazaar_download_sample(mocker, requests_mock):
    class File:
        def __init__(self):
            self.content = b"content"

    file_content = File()
    mocker.patch.object(MalwareBazaar.Client, "malwarebazaar_download_sample_request",
                        return_value=file_content)
    client = create_client()

    args = {"sha256_hash": "094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d"}
    response = MalwareBazaar.malwarebazaar_download_sample_command(client, args)

    assert response.get('File') == 'malware_sample.zip'


COMMAND_PACKAGE = [
    ({"sha256_hash": "094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d",
      "comment": "test"},
     MalwareBazaar.malwarebazaar_comment_add_command),
    ({"file": ["094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d"]},
     MalwareBazaar.file_command),
    ({"sample_type": "tag",
      "sample_value": "TrickBot",
      "limit": 2},
     MalwareBazaar.malwarebazaar_samples_list_command)
]


@pytest.mark.parametrize('args, method_to_run', COMMAND_PACKAGE)
def test_malwarebazaare_exception_raised(requests_mock, args, method_to_run):
    """

    Given:
        - Request with wrong arguments

    When:
        - Running a command

    Then:
        - Raising an error
    """
    mock_response = {
        'query_status': 'tag_not_found'
    }
    requests_mock.post(BASE_URL, json=mock_response)

    client = create_client()

    with pytest.raises(Exception) as e:
        method_to_run(client, args)
    if not e:
        assert False
